# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  push:
    branches: [ staging ]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Label of the container job
  test-image:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    env:
       SECRET_KEY: ${{ secrets.SECRET_KEY }}
       AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
       AUTH0_KEY: ${{ secrets.AUTH0_KEY }}
       AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie
    services:
      mymssqlserver:
        image: docker.io/crzysan/mssql-docker:latest
        ports:
        - 1443:1433/tcp
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "Passw0rd"
          MSSQL_DB: "mydb"
          MSSQL_USER: "myuser"
          MSSQL_PASSWORD: "Mypass123"
      myapp:
        image: docker.io/crzysan/myapp:v76
        ports:
        - 8000:8000/tcp
        env:
          DATABASE_NAME: "mydb"
          DATABASE_HOST: mymssqlserver
          DATABASE_PASS: "Mypass123"
          DATABASE_USER: "myuser"
          DATABASE_PORT: "1433"
          DEBUG: "true"
    steps:
    - uses: actions/checkout@v2
    - name: Run Tests
      run: |
        wait 60
        docker logs myapp
        curl -I localhost:3000
        
  syntaxt-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        export PYTHONPATH="${PYTHONPATH}:$PWD"  # to use absolute from for import modules
        pylint --disable=F0001,C0114,C0115,C0116,E1101,R0903 feed*/*.py

  # Label build
  build:
    runs-on: ubuntu-latest
    needs: syntaxt-check 
    env:
       SECRET_KEY: ${{ secrets.SECRET_KEY }}
       AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
       AUTH0_KEY: ${{ secrets.AUTH0_KEY }}
       AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
    steps:
    - uses: actions/checkout@v1
    - name: Build the docker-compose stack
      run: docker-compose -f docker-compose.yml up -d
    - name: Check running containers
      run: docker ps
    - name: wait for containers 120 sec
      run: sleep 60
    - name: Check running containers again
      run: docker ps
    - name: Check logs
      run: |
        docker logs mssql-server
        docker logs myapp-web
    - name: Run test
      run: curl -I localhost:8000
