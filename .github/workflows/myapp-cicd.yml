name: Django CI

on:
  pull_request:
    branches: [ master ]
#  push:
#    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  syntaxt-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        export PYTHONPATH="${PYTHONPATH}:$PWD"  # to use absolute from for import modules
        pylint --disable=F0001,C0114,C0115,C0116,E1101,R0903 feed*/*.py

  build:
    runs-on: ubuntu-latest
    needs: syntaxt-check 
    env:
       SECRET_KEY: ${{ secrets.SECRET_KEY }}
       AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
       AUTH0_KEY: ${{ secrets.AUTH0_KEY }}
       AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
    steps:
    - uses: actions/checkout@v2
    - name: Build the docker-compose stack
      run: docker-compose -f docker-compose.yml up -d
    - name: Check running containers
      run: docker ps
    - name: wait for containers 120 sec
      run: sleep 60
    - name: Check running containers again
      run: docker ps
    - name: Check logs
      run: |
        docker logs mssql-server
        docker logs myapp-web
    - name: Run test
      run: curl -I localhost:8000

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: crzysan/myapp:v${{ github.run_number }}
          
  # Label of the container job
  test-image:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    needs: push_to_registry
    env:
       SECRET_KEY: ${{ secrets.SECRET_KEY }}
       AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
       AUTH0_KEY: ${{ secrets.AUTH0_KEY }}
       AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie
    services:
      mymssqlserver:
        image: docker.io/crzysan/mssql-docker:latest
        ports:
        - 1443:1433/tcp
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Passw0rd
          MSSQL_DB: mydb
          MSSQL_USER: myuser
          MSSQL_PASSWORD: Mypass123
      myapp:
        image: docker.io/crzysan/myapp:v${{ github.run_number }}
        ports:
        - 8000:8000/tcp
        env:
          DATABASE_NAME: mydb
          DATABASE_HOST: mymssqlserver
          DATABASE_PASS: Mypass123
          DATABASE_USER: myuser
          DATABASE_PORT: 1433
          SECRET_KEY: "${SECRET_KEY}"
    steps:
    - uses: actions/checkout@v2
    - name: Run Tests
      run: |
        wait 60
        docker logs myapp
        curl -I localhost:3000
        
  deploy_to_k8s_prod:
    name: Deploy to dev cluster
    runs-on: ubuntu-latest
    needs: test-image
    environment: prod
    steps:
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASS }}
        port: ${{ secrets.SERVER_PORT }}
        script:  |
           /usr/local/bin/kubectl cluster-info --context kind-prod
           /usr/local/bin/kubectl set image deployment/myapp-web myapp-web=crzysan/myapp:v${{ github.run_number }}
           /usr/local/bin/kubectl rollout status -w deployment/myapp-web
           /bin/sleep 20

  test_deployment:
    name: Test dev cluster
    runs-on: ubuntu-latest
    needs: deploy_to_k8s_prod
    steps:
    - name: Smoke Test
      run: |
        curl -I ${{ secrets.WEBAPP_URL }}
        curl -I ${{ secrets.WEBAPP_URL }}/ht
