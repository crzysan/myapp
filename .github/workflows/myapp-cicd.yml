name: Django CICD

on:
  pull_request:
    branches: [ master ]
#  push:
#    branches: [ master ]

jobs:
  syntaxt-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        export PYTHONPATH="${PYTHONPATH}:$PWD"  # to use absolute from for import modules
        pylint --disable=F0001,C0114,C0115,C0116,E1101,R0903 feed*/*.py

  build:
    name: Build docker image and test it using docker-compose
    runs-on: ubuntu-latest
    needs: syntaxt-check 
    env:
       SECRET_KEY: ${{ secrets.SECRET_KEY }}
       AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
       AUTH0_KEY: ${{ secrets.AUTH0_KEY }}
       AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
    steps:
    - uses: actions/checkout@v2
    - name: Build the docker-compose stack
      run: docker-compose -f docker-compose.yml up -d
    - name: Check running containers
      run: docker ps
    - name: wait for containers 120 sec
      run: sleep 60
    - name: Check running containers again
      run: docker ps
    - name: Check logs
      run: |
        docker logs mssql-server
        docker logs myapp-web
    - name: Run test
      run: curl -I localhost:8000
      
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: crzysan/myapp:v${{ github.run_number }}

      
  test_image:
    name: Test latest version of image
    runs-on: ubuntu-latest
    needs: push_to_registry
    env:
       SECRET_KEY: ${{ secrets.SECRET_KEY }}
       AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
       AUTH0_KEY: ${{ secrets.AUTH0_KEY }}
       AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
    # Service containers to run with `runner-job`
    services:
      mssql-server:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Passw0rd
          MSSQL_DB: mydb
          MSSQL_USER: myuser
          MSSQL_PASSWORD: Mypass123
        volumes:
          - ${{ github.workspace }}/.mssqlscripts/:/tmp/:rw
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -U sa -P $SA_PASSWORD -Q 'select 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1433:1433
      myapp:
        image: crzysan/myapp:v${{ github.run_number }}
        env:
          DATABASE_NAME: mydb
          DATABASE_HOST: mssql-server2
          DATABASE_PASS: Passw0rd
          DATABASE_USER: sa
          DATABASE_PORT: 1433
          DEBUG: "true"
        ports:
          - 8000:8000
    steps:
    - uses: actions/checkout@v2
    - name: Smoke test
      run: |
        curl -I localhost:8000
      
  deploy_to_k8s_dev:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    needs: test_image
    name: Deploy to dev cluster
    environment: dev
    steps:
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASS }}
        port: ${{ secrets.SERVER_PORT }}
        script:  |
           /usr/local/bin/kubectl cluster-info --context kind-dev
           /usr/local/bin/kubectl config use-context kind-dev
           /usr/local/bin/kubectl set-context --current --namespace=playground
           /usr/local/bin/kubectl set image deployment/myapp-web myapp-web=crzysan/myapp:v${{ github.run_number }}
           /usr/local/bin/kubectl rollout status -w deployment/myapp-web

  test_dev_deployment:
    name: Test dev cluster
    runs-on: ubuntu-latest
    needs: deploy_to_k8s_dev
    steps:
    - name: Smoke Test
      run: |
        curl -I http://${{ secrets.APP_ADDRESS }}:8080
        curl -I http://${{ secrets.APP_ADDRESS }}:8080/ht
        
  deploy_to_k8s_prod:
    name: Deploy to prod cluster
    runs-on: ubuntu-latest
    needs: deploy_to_k8s_dev
    environment: prod
    steps:
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASS }}
        port: ${{ secrets.SERVER_PORT }}
        script:  |
           /usr/local/bin/kubectl cluster-info --context kind-prod
           /usr/local/bin/kubectl config use-context kind-prod
           /usr/local/bin/kubectl set-context --current --namespace=playground
           /usr/local/bin/kubectl set image deployment/myapp-web myapp-web=crzysan/myapp:v${{ github.run_number }}
           /usr/local/bin/kubectl rollout status -w deployment/myapp-web

  push_to_registry_with_latest:
    name: Push Docker image to Docker Hub with latest tag
    runs-on: ubuntu-latest
    needs: deploy_to_k8s_prod
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: crzysan/myapp:latest

  test_prod_deployment:
    name: Test prod cluster
    runs-on: ubuntu-latest
    needs: deploy_to_k8s_prod
    steps:
    - name: Smoke Test
      run: |
        curl -I http://${{ secrets.APP_ADDRESS }}:8000
        curl -I http://${{ secrets.APP_ADDRESS }}:8000/ht
