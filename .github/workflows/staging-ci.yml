# This is a basic workflow to help you get started with Actions

name: Staging CI

# Controls when the workflow will run
on:
  push:
    branches: [ staging ]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  syntaxt-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        export PYTHONPATH="${PYTHONPATH}:$PWD"  # to use absolute from for import modules
        pylint --disable=F0001,C0114,C0115,C0116,E1101,R0903 feed*/*.py
  # Label build
  build:
    runs-on: ubuntu-latest
    env:
       SECRET_KEY: ${{ secrets.SECRET_KEY }}
       AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
       AUTH0_KEY: ${{ secrets.AUTH0_KEY }}
       AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
    steps:
    - uses: actions/checkout@v2
    - name: Build the docker-compose stack
      run: docker-compose -f docker-compose-full.yml up -d
    - name: Check running containers
      run: docker ps
    - name: wait for containers 120 sec
      run: sleep 120
    - name: Check running containers again
      run: docker ps
    - name: Check logs
      run: |
        docker logs mssql-server
        docker logs myapp-web
    - name: Run test
      run: curl -I localhost:8000
      
  test_image:
    name: Test latest version of image
    runs-on: ubuntu-latest
    env:
       SECRET_KEY: ${{ secrets.SECRET_KEY }}
       AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
       AUTH0_KEY: ${{ secrets.AUTH0_KEY }}
       AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
    # Service containers to run with `runner-job`
    services:
      mssql-server:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Passw0rd
          MSSQL_DB: mydb
          MSSQL_USER: myuser
          MSSQL_PASSWORD: Mypass123
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -t 1 -U sa -P 'Passw0rd' -Q 'select 1' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 120s
        ports:
          - 1433:1433
    steps:
    - uses: actions/checkout@v2
    - name: check mssql 
      run: |
        docker ps
        docker cp ${{ github.workspace }}/.mssqlscripts/ mssql-server:/var/opt/mssql/.
        docker exec mssql-server /bin/bash /var/opt/mssql/mssql_healthcheck
    - name: Build the docker-compose stack
      run: docker-compose -f docker-compose.yml up -d
    - name: Check running containers
      run: docker ps
    - name: wait for containers 180 sec
      run: sleep 240
    - name: Check running containers again
      run: docker ps
    - name: Check logs
      run: |
        docker logs myapp-web
    - name: Run test
      run: curl -I localhost:8000
